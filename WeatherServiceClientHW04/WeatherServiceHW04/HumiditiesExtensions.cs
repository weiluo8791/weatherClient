// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WeatherServiceClientHW04;
using WeatherServiceClientHW04.Models;

namespace WeatherServiceClientHW04
{
    public static partial class HumiditiesExtensions
    {
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Humidity DeleteHumidityById(this IHumidities operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHumidities)s).DeleteHumidityByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Humidity> DeleteHumidityByIdAsync(this IHumidities operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Humidity> result = await operations.DeleteHumidityByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        public static IList<Humidity> GetHumidities(this IHumidities operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHumidities)s).GetHumiditiesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Humidity>> GetHumiditiesAsync(this IHumidities operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WeatherServiceClientHW04.Models.Humidity>> result = await operations.GetHumiditiesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// GET: api/Humidities/5
        /// </summary>
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Humidity GetHumidityById(this IHumidities operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHumidities)s).GetHumidityByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// GET: api/Humidities/5
        /// </summary>
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Humidity> GetHumidityByIdAsync(this IHumidities operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Humidity> result = await operations.GetHumidityByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='humidity'>
        /// Required.
        /// </param>
        public static Humidity PostHumidityByHumidity(this IHumidities operations, Humidity humidity)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHumidities)s).PostHumidityByHumidityAsync(humidity);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='humidity'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Humidity> PostHumidityByHumidityAsync(this IHumidities operations, Humidity humidity, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Humidity> result = await operations.PostHumidityByHumidityWithOperationResponseAsync(humidity, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='humidity'>
        /// Required.
        /// </param>
        public static object PutHumidityByIdAndHumidity(this IHumidities operations, string id, Humidity humidity)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IHumidities)s).PutHumidityByIdAndHumidityAsync(id, humidity);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IHumidities.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='humidity'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutHumidityByIdAndHumidityAsync(this IHumidities operations, string id, Humidity humidity, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutHumidityByIdAndHumidityWithOperationResponseAsync(id, humidity, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
