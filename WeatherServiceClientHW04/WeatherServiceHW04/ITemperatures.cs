// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WeatherServiceClientHW04.Models;

namespace WeatherServiceClientHW04
{
    public partial interface ITemperatures
    {
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> DeleteTemperatureByIdWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Temperature>>> GetAllTemperaturesWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> GetAverageTemperatureByTypeAndPeriodWithOperationResponseAsync(string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> GetHighTemperatureByTypeAndPeriodWithOperationResponseAsync(string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> GetLowTemperatureByTypeAndPeriodWithOperationResponseAsync(string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> GetOneTemperatureByIdWithOperationResponseAsync(string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='temperature'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<Temperature>> PostTemperatureByTemperatureWithOperationResponseAsync(Temperature temperature, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='temperature'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> PutTemperatureByIdAndTemperatureWithOperationResponseAsync(string id, Temperature temperature, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
