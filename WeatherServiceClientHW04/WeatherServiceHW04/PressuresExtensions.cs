// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WeatherServiceClientHW04;
using WeatherServiceClientHW04.Models;

namespace WeatherServiceClientHW04
{
    public static partial class PressuresExtensions
    {
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Pressure DeletePressureById(this IPressures operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPressures)s).DeletePressureByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Pressure> DeletePressureByIdAsync(this IPressures operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Pressure> result = await operations.DeletePressureByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Pressure GetPressureById(this IPressures operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPressures)s).GetPressureByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Pressure> GetPressureByIdAsync(this IPressures operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Pressure> result = await operations.GetPressureByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        public static IList<Pressure> GetPressures(this IPressures operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPressures)s).GetPressuresAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Pressure>> GetPressuresAsync(this IPressures operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WeatherServiceClientHW04.Models.Pressure>> result = await operations.GetPressuresWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='pressure'>
        /// Required.
        /// </param>
        public static Pressure PostPressureByPressure(this IPressures operations, Pressure pressure)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPressures)s).PostPressureByPressureAsync(pressure);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='pressure'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Pressure> PostPressureByPressureAsync(this IPressures operations, Pressure pressure, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Pressure> result = await operations.PostPressureByPressureWithOperationResponseAsync(pressure, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='pressure'>
        /// Required.
        /// </param>
        public static object PutPressureByIdAndPressure(this IPressures operations, string id, Pressure pressure)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPressures)s).PutPressureByIdAndPressureAsync(id, pressure);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.IPressures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='pressure'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutPressureByIdAndPressureAsync(this IPressures operations, string id, Pressure pressure, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutPressureByIdAndPressureWithOperationResponseAsync(id, pressure, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
