// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using WeatherServiceClientHW04;
using WeatherServiceClientHW04.Models;

namespace WeatherServiceClientHW04
{
    public static partial class TemperaturesExtensions
    {
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Temperature DeleteTemperatureById(this ITemperatures operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).DeleteTemperatureByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Temperature> DeleteTemperatureByIdAsync(this ITemperatures operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Temperature> result = await operations.DeleteTemperatureByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        public static IList<Temperature> GetAllTemperatures(this ITemperatures operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).GetAllTemperaturesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Temperature>> GetAllTemperaturesAsync(this ITemperatures operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<WeatherServiceClientHW04.Models.Temperature>> result = await operations.GetAllTemperaturesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        public static string GetAverageTemperatureByTypeAndPeriod(this ITemperatures operations, string type, int period)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).GetAverageTemperatureByTypeAndPeriodAsync(type, period);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetAverageTemperatureByTypeAndPeriodAsync(this ITemperatures operations, string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetAverageTemperatureByTypeAndPeriodWithOperationResponseAsync(type, period, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        public static string GetHighTemperatureByTypeAndPeriod(this ITemperatures operations, string type, int period)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).GetHighTemperatureByTypeAndPeriodAsync(type, period);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetHighTemperatureByTypeAndPeriodAsync(this ITemperatures operations, string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetHighTemperatureByTypeAndPeriodWithOperationResponseAsync(type, period, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        public static string GetLowTemperatureByTypeAndPeriod(this ITemperatures operations, string type, int period)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).GetLowTemperatureByTypeAndPeriodAsync(type, period);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='type'>
        /// Required.
        /// </param>
        /// <param name='period'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetLowTemperatureByTypeAndPeriodAsync(this ITemperatures operations, string type, int period, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetLowTemperatureByTypeAndPeriodWithOperationResponseAsync(type, period, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Temperature GetOneTemperatureById(this ITemperatures operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).GetOneTemperatureByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Temperature> GetOneTemperatureByIdAsync(this ITemperatures operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Temperature> result = await operations.GetOneTemperatureByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='temperature'>
        /// Required.
        /// </param>
        public static Temperature PostTemperatureByTemperature(this ITemperatures operations, Temperature temperature)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).PostTemperatureByTemperatureAsync(temperature);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='temperature'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Temperature> PostTemperatureByTemperatureAsync(this ITemperatures operations, Temperature temperature, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<WeatherServiceClientHW04.Models.Temperature> result = await operations.PostTemperatureByTemperatureWithOperationResponseAsync(temperature, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='temperature'>
        /// Required.
        /// </param>
        public static object PutTemperatureByIdAndTemperature(this ITemperatures operations, string id, Temperature temperature)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemperatures)s).PutTemperatureByIdAndTemperatureAsync(id, temperature);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the WeatherServiceClientHW04.ITemperatures.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='temperature'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutTemperatureByIdAndTemperatureAsync(this ITemperatures operations, string id, Temperature temperature, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutTemperatureByIdAndTemperatureWithOperationResponseAsync(id, temperature, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
